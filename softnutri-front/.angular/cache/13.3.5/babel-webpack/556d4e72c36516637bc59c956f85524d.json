{"ast":null,"code":"import { HTTP_INTERCEPTORS, HttpErrorResponse } from '@angular/common/http';\nimport { BehaviorSubject, throwError } from 'rxjs';\nimport { catchError, filter, switchMap, take } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services\";\nconst TOKEN_HEADER_KEY = 'Authorization';\nexport let AuthInterceptor = /*#__PURE__*/(() => {\n  class AuthInterceptor {\n    constructor(tokenService, authService) {\n      this.tokenService = tokenService;\n      this.authService = authService;\n      this.isRefreshing = false;\n      this.refreshTokenSubject = new BehaviorSubject(null);\n    }\n\n    intercept(req, next) {\n      let authReq = req;\n      const token = this.tokenService.getToken();\n      console.log(token);\n      debugger;\n\n      if (token != null) {\n        authReq = this.addTokenHeader(req, token);\n      }\n\n      return next.handle(authReq).pipe(catchError(error => {\n        if (error instanceof HttpErrorResponse && !authReq.url.includes('auth/signin') && error.status === 401) {\n          return this.handle401Error(authReq, next);\n        }\n\n        return throwError(() => error);\n      }));\n    }\n\n    handle401Error(request, next) {\n      if (!this.isRefreshing) {\n        this.isRefreshing = true;\n        this.refreshTokenSubject.next(null);\n        const token = this.tokenService.getRefreshToken();\n        if (token) return this.authService.refreshToken(token).pipe(switchMap(token => {\n          this.isRefreshing = false;\n          this.tokenService.saveToken(token.accessToken);\n          this.refreshTokenSubject.next(token.accessToken);\n          return next.handle(this.addTokenHeader(request, token.accessToken));\n        }), catchError(err => {\n          this.isRefreshing = false;\n          this.tokenService.signOut();\n          return throwError(() => err);\n        }));\n      }\n\n      return this.refreshTokenSubject.pipe(filter(token => token !== null), take(1), switchMap(token => next.handle(this.addTokenHeader(request, token))));\n    }\n\n    addTokenHeader(request, token) {\n      console.log(token);\n      return request.clone({\n        headers: request.headers.set(TOKEN_HEADER_KEY, 'Bearer ' + token)\n      });\n    }\n\n  }\n\n  AuthInterceptor.ɵfac = function AuthInterceptor_Factory(t) {\n    return new (t || AuthInterceptor)(i0.ɵɵinject(i1.TokenStorageService), i0.ɵɵinject(i1.AuthService));\n  };\n\n  AuthInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthInterceptor,\n    factory: AuthInterceptor.ɵfac\n  });\n  return AuthInterceptor;\n})();\nexport const authInterceptorProviders = [{\n  provide: HTTP_INTERCEPTORS,\n  useClass: AuthInterceptor,\n  multi: true\n}];","map":null,"metadata":{},"sourceType":"module"}