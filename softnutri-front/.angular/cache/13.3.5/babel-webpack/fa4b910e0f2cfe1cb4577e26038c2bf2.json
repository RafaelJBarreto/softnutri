{"ast":null,"code":"import { __extends } from \"tslib\";\nimport Element from '../Element.js';\nimport BoundingRect from '../core/BoundingRect.js';\nimport { keys, extend, createObject } from '../core/util.js';\nimport { REDRAW_BIT, STYLE_CHANGED_BIT } from './constants.js';\nvar STYLE_MAGIC_KEY = '__zr_style_' + Math.round(Math.random() * 10);\nexport var DEFAULT_COMMON_STYLE = {\n  shadowBlur: 0,\n  shadowOffsetX: 0,\n  shadowOffsetY: 0,\n  shadowColor: '#000',\n  opacity: 1,\n  blend: 'source-over'\n};\nexport var DEFAULT_COMMON_ANIMATION_PROPS = {\n  style: {\n    shadowBlur: true,\n    shadowOffsetX: true,\n    shadowOffsetY: true,\n    shadowColor: true,\n    opacity: true\n  }\n};\nDEFAULT_COMMON_STYLE[STYLE_MAGIC_KEY] = true;\nvar PRIMARY_STATES_KEYS = ['z', 'z2', 'invisible'];\nvar PRIMARY_STATES_KEYS_IN_HOVER_LAYER = ['invisible'];\n\nvar Displayable = function (_super) {\n  __extends(Displayable, _super);\n\n  function Displayable(props) {\n    return _super.call(this, props) || this;\n  }\n\n  Displayable.prototype._init = function (props) {\n    var keysArr = keys(props);\n\n    for (var i = 0; i < keysArr.length; i++) {\n      var key = keysArr[i];\n\n      if (key === 'style') {\n        this.useStyle(props[key]);\n      } else {\n        _super.prototype.attrKV.call(this, key, props[key]);\n      }\n    }\n\n    if (!this.style) {\n      this.useStyle({});\n    }\n  };\n\n  Displayable.prototype.beforeBrush = function () {};\n\n  Displayable.prototype.afterBrush = function () {};\n\n  Displayable.prototype.innerBeforeBrush = function () {};\n\n  Displayable.prototype.innerAfterBrush = function () {};\n\n  Displayable.prototype.shouldBePainted = function (viewWidth, viewHeight, considerClipPath, considerAncestors) {\n    var m = this.transform;\n\n    if (this.ignore || this.invisible || this.style.opacity === 0 || this.culling && isDisplayableCulled(this, viewWidth, viewHeight) || m && !m[0] && !m[3]) {\n      return false;\n    }\n\n    if (considerClipPath && this.__clipPaths) {\n      for (var i = 0; i < this.__clipPaths.length; ++i) {\n        if (this.__clipPaths[i].isZeroArea()) {\n          return false;\n        }\n      }\n    }\n\n    if (considerAncestors && this.parent) {\n      var parent_1 = this.parent;\n\n      while (parent_1) {\n        if (parent_1.ignore) {\n          return false;\n        }\n\n        parent_1 = parent_1.parent;\n      }\n    }\n\n    return true;\n  };\n\n  Displayable.prototype.contain = function (x, y) {\n    return this.rectContain(x, y);\n  };\n\n  Displayable.prototype.traverse = function (cb, context) {\n    cb.call(context, this);\n  };\n\n  Displayable.prototype.rectContain = function (x, y) {\n    var coord = this.transformCoordToLocal(x, y);\n    var rect = this.getBoundingRect();\n    return rect.contain(coord[0], coord[1]);\n  };\n\n  Displayable.prototype.getPaintRect = function () {\n    var rect = this._paintRect;\n\n    if (!this._paintRect || this.__dirty) {\n      var transform = this.transform;\n      var elRect = this.getBoundingRect();\n      var style = this.style;\n      var shadowSize = style.shadowBlur || 0;\n      var shadowOffsetX = style.shadowOffsetX || 0;\n      var shadowOffsetY = style.shadowOffsetY || 0;\n      rect = this._paintRect || (this._paintRect = new BoundingRect(0, 0, 0, 0));\n\n      if (transform) {\n        BoundingRect.applyTransform(rect, elRect, transform);\n      } else {\n        rect.copy(elRect);\n      }\n\n      if (shadowSize || shadowOffsetX || shadowOffsetY) {\n        rect.width += shadowSize * 2 + Math.abs(shadowOffsetX);\n        rect.height += shadowSize * 2 + Math.abs(shadowOffsetY);\n        rect.x = Math.min(rect.x, rect.x + shadowOffsetX - shadowSize);\n        rect.y = Math.min(rect.y, rect.y + shadowOffsetY - shadowSize);\n      }\n\n      var tolerance = this.dirtyRectTolerance;\n\n      if (!rect.isZero()) {\n        rect.x = Math.floor(rect.x - tolerance);\n        rect.y = Math.floor(rect.y - tolerance);\n        rect.width = Math.ceil(rect.width + 1 + tolerance * 2);\n        rect.height = Math.ceil(rect.height + 1 + tolerance * 2);\n      }\n    }\n\n    return rect;\n  };\n\n  Displayable.prototype.setPrevPaintRect = function (paintRect) {\n    if (paintRect) {\n      this._prevPaintRect = this._prevPaintRect || new BoundingRect(0, 0, 0, 0);\n\n      this._prevPaintRect.copy(paintRect);\n    } else {\n      this._prevPaintRect = null;\n    }\n  };\n\n  Displayable.prototype.getPrevPaintRect = function () {\n    return this._prevPaintRect;\n  };\n\n  Displayable.prototype.animateStyle = function (loop) {\n    return this.animate('style', loop);\n  };\n\n  Displayable.prototype.updateDuringAnimation = function (targetKey) {\n    if (targetKey === 'style') {\n      this.dirtyStyle();\n    } else {\n      this.markRedraw();\n    }\n  };\n\n  Displayable.prototype.attrKV = function (key, value) {\n    if (key !== 'style') {\n      _super.prototype.attrKV.call(this, key, value);\n    } else {\n      if (!this.style) {\n        this.useStyle(value);\n      } else {\n        this.setStyle(value);\n      }\n    }\n  };\n\n  Displayable.prototype.setStyle = function (keyOrObj, value) {\n    if (typeof keyOrObj === 'string') {\n      this.style[keyOrObj] = value;\n    } else {\n      extend(this.style, keyOrObj);\n    }\n\n    this.dirtyStyle();\n    return this;\n  };\n\n  Displayable.prototype.dirtyStyle = function (notRedraw) {\n    if (!notRedraw) {\n      this.markRedraw();\n    }\n\n    this.__dirty |= STYLE_CHANGED_BIT;\n\n    if (this._rect) {\n      this._rect = null;\n    }\n  };\n\n  Displayable.prototype.dirty = function () {\n    this.dirtyStyle();\n  };\n\n  Displayable.prototype.styleChanged = function () {\n    return !!(this.__dirty & STYLE_CHANGED_BIT);\n  };\n\n  Displayable.prototype.styleUpdated = function () {\n    this.__dirty &= ~STYLE_CHANGED_BIT;\n  };\n\n  Displayable.prototype.createStyle = function (obj) {\n    return createObject(DEFAULT_COMMON_STYLE, obj);\n  };\n\n  Displayable.prototype.useStyle = function (obj) {\n    if (!obj[STYLE_MAGIC_KEY]) {\n      obj = this.createStyle(obj);\n    }\n\n    if (this.__inHover) {\n      this.__hoverStyle = obj;\n    } else {\n      this.style = obj;\n    }\n\n    this.dirtyStyle();\n  };\n\n  Displayable.prototype.isStyleObject = function (obj) {\n    return obj[STYLE_MAGIC_KEY];\n  };\n\n  Displayable.prototype._innerSaveToNormal = function (toState) {\n    _super.prototype._innerSaveToNormal.call(this, toState);\n\n    var normalState = this._normalState;\n\n    if (toState.style && !normalState.style) {\n      normalState.style = this._mergeStyle(this.createStyle(), this.style);\n    }\n\n    this._savePrimaryToNormal(toState, normalState, PRIMARY_STATES_KEYS);\n  };\n\n  Displayable.prototype._applyStateObj = function (stateName, state, normalState, keepCurrentStates, transition, animationCfg) {\n    _super.prototype._applyStateObj.call(this, stateName, state, normalState, keepCurrentStates, transition, animationCfg);\n\n    var needsRestoreToNormal = !(state && keepCurrentStates);\n    var targetStyle;\n\n    if (state && state.style) {\n      if (transition) {\n        if (keepCurrentStates) {\n          targetStyle = state.style;\n        } else {\n          targetStyle = this._mergeStyle(this.createStyle(), normalState.style);\n\n          this._mergeStyle(targetStyle, state.style);\n        }\n      } else {\n        targetStyle = this._mergeStyle(this.createStyle(), keepCurrentStates ? this.style : normalState.style);\n\n        this._mergeStyle(targetStyle, state.style);\n      }\n    } else if (needsRestoreToNormal) {\n      targetStyle = normalState.style;\n    }\n\n    if (targetStyle) {\n      if (transition) {\n        var sourceStyle = this.style;\n        this.style = this.createStyle(needsRestoreToNormal ? {} : sourceStyle);\n\n        if (needsRestoreToNormal) {\n          var changedKeys = keys(sourceStyle);\n\n          for (var i = 0; i < changedKeys.length; i++) {\n            var key = changedKeys[i];\n\n            if (key in targetStyle) {\n              targetStyle[key] = targetStyle[key];\n              this.style[key] = sourceStyle[key];\n            }\n          }\n        }\n\n        var targetKeys = keys(targetStyle);\n\n        for (var i = 0; i < targetKeys.length; i++) {\n          var key = targetKeys[i];\n          this.style[key] = this.style[key];\n        }\n\n        this._transitionState(stateName, {\n          style: targetStyle\n        }, animationCfg, this.getAnimationStyleProps());\n      } else {\n        this.useStyle(targetStyle);\n      }\n    }\n\n    var statesKeys = this.__inHover ? PRIMARY_STATES_KEYS_IN_HOVER_LAYER : PRIMARY_STATES_KEYS;\n\n    for (var i = 0; i < statesKeys.length; i++) {\n      var key = statesKeys[i];\n\n      if (state && state[key] != null) {\n        this[key] = state[key];\n      } else if (needsRestoreToNormal) {\n        if (normalState[key] != null) {\n          this[key] = normalState[key];\n        }\n      }\n    }\n  };\n\n  Displayable.prototype._mergeStates = function (states) {\n    var mergedState = _super.prototype._mergeStates.call(this, states);\n\n    var mergedStyle;\n\n    for (var i = 0; i < states.length; i++) {\n      var state = states[i];\n\n      if (state.style) {\n        mergedStyle = mergedStyle || {};\n\n        this._mergeStyle(mergedStyle, state.style);\n      }\n    }\n\n    if (mergedStyle) {\n      mergedState.style = mergedStyle;\n    }\n\n    return mergedState;\n  };\n\n  Displayable.prototype._mergeStyle = function (targetStyle, sourceStyle) {\n    extend(targetStyle, sourceStyle);\n    return targetStyle;\n  };\n\n  Displayable.prototype.getAnimationStyleProps = function () {\n    return DEFAULT_COMMON_ANIMATION_PROPS;\n  };\n\n  Displayable.initDefaultProps = function () {\n    var dispProto = Displayable.prototype;\n    dispProto.type = 'displayable';\n    dispProto.invisible = false;\n    dispProto.z = 0;\n    dispProto.z2 = 0;\n    dispProto.zlevel = 0;\n    dispProto.culling = false;\n    dispProto.cursor = 'pointer';\n    dispProto.rectHover = false;\n    dispProto.incremental = false;\n    dispProto._rect = null;\n    dispProto.dirtyRectTolerance = 0;\n    dispProto.__dirty = REDRAW_BIT | STYLE_CHANGED_BIT;\n  }();\n\n  return Displayable;\n}(Element);\n\nvar tmpRect = new BoundingRect(0, 0, 0, 0);\nvar viewRect = new BoundingRect(0, 0, 0, 0);\n\nfunction isDisplayableCulled(el, width, height) {\n  tmpRect.copy(el.getBoundingRect());\n\n  if (el.transform) {\n    tmpRect.applyTransform(el.transform);\n  }\n\n  viewRect.width = width;\n  viewRect.height = height;\n  return !tmpRect.intersect(viewRect);\n}\n\nexport default Displayable;","map":null,"metadata":{},"sourceType":"module"}