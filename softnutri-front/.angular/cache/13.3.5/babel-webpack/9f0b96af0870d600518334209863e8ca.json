{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Component, ChangeDetectionStrategy, Input, ViewChild, NgModule } from '@angular/core';\nimport { asapScheduler } from 'rxjs';\nimport ApexCharts from 'apexcharts';\nconst _c0 = [\"chart\"];\nlet ChartComponent = /*#__PURE__*/(() => {\n  class ChartComponent {\n    constructor(ngZone) {\n      this.ngZone = ngZone;\n      this.autoUpdateSeries = true;\n    }\n\n    ngOnInit() {\n      asapScheduler.schedule(() => {\n        this.createElement();\n      });\n    }\n\n    ngOnChanges(changes) {\n      asapScheduler.schedule(() => {\n        if (this.autoUpdateSeries && Object.keys(changes).filter(c => c !== \"series\").length === 0) {\n          this.updateSeries(this.series, true);\n          return;\n        }\n\n        this.createElement();\n      });\n    }\n\n    ngOnDestroy() {\n      if (this.chartObj) {\n        this.chartObj.destroy();\n      }\n    }\n\n    createElement() {\n      const options = {};\n\n      if (this.annotations) {\n        options.annotations = this.annotations;\n      }\n\n      if (this.chart) {\n        options.chart = this.chart;\n      }\n\n      if (this.colors) {\n        options.colors = this.colors;\n      }\n\n      if (this.dataLabels) {\n        options.dataLabels = this.dataLabels;\n      }\n\n      if (this.series) {\n        options.series = this.series;\n      }\n\n      if (this.stroke) {\n        options.stroke = this.stroke;\n      }\n\n      if (this.labels) {\n        options.labels = this.labels;\n      }\n\n      if (this.legend) {\n        options.legend = this.legend;\n      }\n\n      if (this.fill) {\n        options.fill = this.fill;\n      }\n\n      if (this.tooltip) {\n        options.tooltip = this.tooltip;\n      }\n\n      if (this.plotOptions) {\n        options.plotOptions = this.plotOptions;\n      }\n\n      if (this.responsive) {\n        options.responsive = this.responsive;\n      }\n\n      if (this.markers) {\n        options.markers = this.markers;\n      }\n\n      if (this.noData) {\n        options.noData = this.noData;\n      }\n\n      if (this.xaxis) {\n        options.xaxis = this.xaxis;\n      }\n\n      if (this.yaxis) {\n        options.yaxis = this.yaxis;\n      }\n\n      if (this.grid) {\n        options.grid = this.grid;\n      }\n\n      if (this.states) {\n        options.states = this.states;\n      }\n\n      if (this.title) {\n        options.title = this.title;\n      }\n\n      if (this.subtitle) {\n        options.subtitle = this.subtitle;\n      }\n\n      if (this.theme) {\n        options.theme = this.theme;\n      }\n\n      if (this.chartObj) {\n        this.chartObj.destroy();\n      }\n\n      this.ngZone.runOutsideAngular(() => {\n        this.chartObj = new ApexCharts(this.chartElement.nativeElement, options);\n      });\n      this.render();\n    }\n\n    render() {\n      return this.ngZone.runOutsideAngular(() => this.chartObj.render());\n    }\n\n    updateOptions(options, redrawPaths, animate, updateSyncedCharts) {\n      return this.ngZone.runOutsideAngular(() => this.chartObj.updateOptions(options, redrawPaths, animate, updateSyncedCharts));\n    }\n\n    updateSeries(newSeries, animate) {\n      return this.ngZone.runOutsideAngular(() => this.chartObj.updateSeries(newSeries, animate));\n    }\n\n    appendSeries(newSeries, animate) {\n      this.ngZone.runOutsideAngular(() => this.chartObj.appendSeries(newSeries, animate));\n    }\n\n    appendData(newData) {\n      this.ngZone.runOutsideAngular(() => this.chartObj.appendData(newData));\n    }\n\n    toggleSeries(seriesName) {\n      return this.ngZone.runOutsideAngular(() => this.chartObj.toggleSeries(seriesName));\n    }\n\n    showSeries(seriesName) {\n      this.ngZone.runOutsideAngular(() => this.chartObj.showSeries(seriesName));\n    }\n\n    hideSeries(seriesName) {\n      this.ngZone.runOutsideAngular(() => this.chartObj.hideSeries(seriesName));\n    }\n\n    resetSeries() {\n      this.ngZone.runOutsideAngular(() => this.chartObj.resetSeries());\n    }\n\n    zoomX(min, max) {\n      this.ngZone.runOutsideAngular(() => this.chartObj.zoomX(min, max));\n    }\n\n    toggleDataPointSelection(seriesIndex, dataPointIndex) {\n      this.ngZone.runOutsideAngular(() => this.chartObj.toggleDataPointSelection(seriesIndex, dataPointIndex));\n    }\n\n    destroy() {\n      this.chartObj.destroy();\n    }\n\n    setLocale(localeName) {\n      this.ngZone.runOutsideAngular(() => this.chartObj.setLocale(localeName));\n    }\n\n    paper() {\n      this.ngZone.runOutsideAngular(() => this.chartObj.paper());\n    }\n\n    addXaxisAnnotation(options, pushToMemory, context) {\n      this.ngZone.runOutsideAngular(() => this.chartObj.addXaxisAnnotation(options, pushToMemory, context));\n    }\n\n    addYaxisAnnotation(options, pushToMemory, context) {\n      this.ngZone.runOutsideAngular(() => this.chartObj.addYaxisAnnotation(options, pushToMemory, context));\n    }\n\n    addPointAnnotation(options, pushToMemory, context) {\n      this.ngZone.runOutsideAngular(() => this.chartObj.addPointAnnotation(options, pushToMemory, context));\n    }\n\n    removeAnnotation(id, options) {\n      this.ngZone.runOutsideAngular(() => this.chartObj.removeAnnotation(id, options));\n    }\n\n    clearAnnotations(options) {\n      this.ngZone.runOutsideAngular(() => this.chartObj.clearAnnotations(options));\n    }\n\n    dataURI(options) {\n      return this.chartObj.dataURI(options);\n    }\n\n  }\n\n  /** @nocollapse */\n\n  /** @nocollapse */\n  ChartComponent.ɵfac = function ChartComponent_Factory(t) {\n    return new (t || ChartComponent)(i0.ɵɵdirectiveInject(i0.NgZone));\n  };\n  /** @nocollapse */\n\n  /** @nocollapse */\n\n\n  ChartComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: ChartComponent,\n    selectors: [[\"apx-chart\"]],\n    viewQuery: function ChartComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.chartElement = _t.first);\n      }\n    },\n    inputs: {\n      chart: \"chart\",\n      annotations: \"annotations\",\n      colors: \"colors\",\n      dataLabels: \"dataLabels\",\n      series: \"series\",\n      stroke: \"stroke\",\n      labels: \"labels\",\n      legend: \"legend\",\n      markers: \"markers\",\n      noData: \"noData\",\n      fill: \"fill\",\n      tooltip: \"tooltip\",\n      plotOptions: \"plotOptions\",\n      responsive: \"responsive\",\n      xaxis: \"xaxis\",\n      yaxis: \"yaxis\",\n      grid: \"grid\",\n      states: \"states\",\n      title: \"title\",\n      subtitle: \"subtitle\",\n      theme: \"theme\",\n      autoUpdateSeries: \"autoUpdateSeries\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 2,\n    vars: 0,\n    consts: [[\"chart\", \"\"]],\n    template: function ChartComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"div\", null, 0);\n      }\n    },\n    styles: [\"\"],\n    changeDetection: 0\n  });\n  return ChartComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nwindow.ApexCharts = ApexCharts;\nconst declerations = [ChartComponent];\nlet NgApexchartsModule = /*#__PURE__*/(() => {\n  class NgApexchartsModule {}\n\n  /** @nocollapse */\n\n  /** @nocollapse */\n  NgApexchartsModule.ɵfac = function NgApexchartsModule_Factory(t) {\n    return new (t || NgApexchartsModule)();\n  };\n  /** @nocollapse */\n\n  /** @nocollapse */\n\n\n  NgApexchartsModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: NgApexchartsModule\n  });\n  /** @nocollapse */\n\n  /** @nocollapse */\n\n  NgApexchartsModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[]]\n  });\n  return NgApexchartsModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Public API Surface of ng-apexcharts\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { ChartComponent, NgApexchartsModule }; //# sourceMappingURL=ng-apexcharts.mjs.map","map":null,"metadata":{},"sourceType":"module"}