{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../index\";\nimport * as i2 from \"@angular/material/snack-bar\";\nconst TOKEN_KEY = 'token';\nconst USER_KEY = 'loginData';\nconst REFRESHTOKEN_KEY = 'refreshToken';\nexport let TokenStorageService = /*#__PURE__*/(() => {\n  class TokenStorageService {\n    constructor(userInfoService, userService, snackBar) {\n      this.userInfoService = userInfoService;\n      this.userService = userService;\n      this.snackBar = snackBar;\n    }\n\n    signOut() {\n      let logOutRequest = {\n        userId: this.getUser().id\n      };\n      this.userService.logoutUser(logOutRequest).subscribe({\n        error: err => {\n          this.snackBar.open(err.menssage, 'Ok', {\n            horizontalPosition: 'center',\n            verticalPosition: 'bottom',\n            duration: 10000\n          });\n        }\n      });\n      localStorage.clear();\n      this.userInfoService.alterValue(false);\n    }\n\n    saveToken(token) {\n      localStorage.removeItem(TOKEN_KEY);\n      localStorage.setItem(TOKEN_KEY, token);\n      const user = this.getUser();\n\n      if (user.id) {\n        this.saveUser(Object.assign(Object.assign({}, user), {\n          accessToken: token\n        }));\n      }\n    }\n\n    getToken() {\n      var token = localStorage.getItem(TOKEN_KEY);\n\n      if (token != null) {\n        this.userInfoService.alterValue(true);\n      }\n\n      return token;\n    }\n\n    saveUser(user) {\n      localStorage.removeItem(USER_KEY);\n      localStorage.setItem(USER_KEY, JSON.stringify(user));\n    }\n\n    getUser() {\n      const user = localStorage.getItem(USER_KEY);\n\n      if (user) {\n        return JSON.parse(user);\n      }\n\n      return {};\n    }\n\n    saveRefreshToken(token) {\n      localStorage.removeItem(REFRESHTOKEN_KEY);\n      localStorage.setItem(REFRESHTOKEN_KEY, token);\n    }\n\n    getRefreshToken() {\n      return localStorage.getItem(REFRESHTOKEN_KEY);\n    }\n\n    getIdUser() {\n      let userId = this.getUser().id;\n      return userId;\n    }\n\n  }\n\n  TokenStorageService.ɵfac = function TokenStorageService_Factory(t) {\n    return new (t || TokenStorageService)(i0.ɵɵinject(i1.UserInfoService), i0.ɵɵinject(i1.UserService), i0.ɵɵinject(i2.MatSnackBar));\n  };\n\n  TokenStorageService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TokenStorageService,\n    factory: TokenStorageService.ɵfac,\n    providedIn: 'root'\n  });\n  return TokenStorageService;\n})();","map":null,"metadata":{},"sourceType":"module"}