{"ast":null,"code":"// Hot Module Replacement\nfunction identity(val) {\n  return val;\n}\n\nexport function bootloader(main, before, after) {\n  if (typeof main === 'object') {\n    const _main = main.main;\n    before = main.before;\n    after = main.after;\n    main = _main;\n  }\n\n  before = before || identity;\n  after = after || identity;\n  const readyState = document.readyState;\n\n  function __domReadyHandler() {\n    document.removeEventListener('DOMContentLoaded', __domReadyHandler);\n    after(main(before(readyState)));\n  }\n\n  switch (readyState) {\n    case 'loading':\n      document.addEventListener('DOMContentLoaded', __domReadyHandler);\n      break;\n\n    case 'interactive':\n    case 'complete':\n    default:\n      after(main(before(readyState)));\n  }\n} // create new host elements and remove the old elements\n\nexport function createNewHosts(cmps) {\n  const components = Array.prototype.map.call(cmps, function (componentNode) {\n    const newNode = document.createElement(componentNode.tagName);\n    const parentNode = componentNode.parentNode;\n    const currentDisplay = newNode.style.display;\n    newNode.style.display = 'none';\n    parentNode.insertBefore(newNode, componentNode);\n\n    function removeOldHost() {\n      newNode.style.display = currentDisplay;\n\n      try {\n        parentNode.removeChild(componentNode);\n      } catch (e) {}\n    }\n\n    return removeOldHost;\n  });\n  return function removeOldHosts() {\n    components.forEach(removeOldHost => removeOldHost());\n  };\n} // remove old styles\n\nexport function removeNgStyles() {\n  const docHead = document.head;\n\n  const _styles = docHead.querySelectorAll('style');\n\n  const styles = Array.prototype.slice.call(_styles);\n  styles.filter(style => style.innerText.indexOf('_ng') !== -1).map(el => docHead.removeChild(el));\n} // get input values\n\nexport function getInputValues() {\n  const _inputs = document.querySelectorAll('input');\n\n  const inputs = Array.prototype.slice.call(_inputs);\n  return inputs.map(input => input.value);\n} // set input values\n\nexport function setInputValues(_inputs) {\n  const inputs = document.querySelectorAll('input');\n\n  if (_inputs && inputs.length === _inputs.length) {\n    _inputs.forEach((value, i) => {\n      const el = inputs[i];\n      el.value = value;\n      el.dispatchEvent(new CustomEvent('input', {\n        detail: el.value\n      }));\n    }); // clear array\n\n\n    _inputs.length = 0;\n  }\n} // get/set input values\n\nexport function createInputTransfer() {\n  const _inputs = getInputValues();\n\n  return function restoreInputValues() {\n    return setInputValues(_inputs);\n  };\n} //# sourceMappingURL=helpers.js.map","map":null,"metadata":{},"sourceType":"module"}