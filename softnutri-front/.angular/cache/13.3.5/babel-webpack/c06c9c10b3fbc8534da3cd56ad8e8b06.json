{"ast":null,"code":"import { DEFAULT_PATH_STYLE } from '../graphic/Path.js';\nimport ZRImage from '../graphic/Image.js';\nimport { getLineDash } from '../canvas/dashStyle.js';\nimport { map } from '../core/util.js';\nimport { normalizeColor } from './helper.js';\nvar NONE = 'none';\nvar mathRound = Math.round;\n\nfunction pathHasFill(style) {\n  var fill = style.fill;\n  return fill != null && fill !== NONE;\n}\n\nfunction pathHasStroke(style) {\n  var stroke = style.stroke;\n  return stroke != null && stroke !== NONE;\n}\n\nvar strokeProps = ['lineCap', 'miterLimit', 'lineJoin'];\nvar svgStrokeProps = map(strokeProps, function (prop) {\n  return \"stroke-\" + prop.toLowerCase();\n});\nexport default function mapStyleToAttrs(updateAttr, style, el, forceUpdate) {\n  var opacity = style.opacity == null ? 1 : style.opacity;\n\n  if (el instanceof ZRImage) {\n    updateAttr('opacity', opacity);\n    return;\n  }\n\n  if (pathHasFill(style)) {\n    var fill = normalizeColor(style.fill);\n    updateAttr('fill', fill.color);\n    var fillOpacity = style.fillOpacity != null ? style.fillOpacity * fill.opacity * opacity : fill.opacity * opacity;\n\n    if (forceUpdate || fillOpacity < 1) {\n      updateAttr('fill-opacity', fillOpacity);\n    }\n  } else {\n    updateAttr('fill', NONE);\n  }\n\n  if (pathHasStroke(style)) {\n    var stroke = normalizeColor(style.stroke);\n    updateAttr('stroke', stroke.color);\n    var strokeScale = style.strokeNoScale ? el.getLineScale() : 1;\n    var strokeWidth = strokeScale ? (style.lineWidth || 0) / strokeScale : 0;\n    var strokeOpacity = style.strokeOpacity != null ? style.strokeOpacity * stroke.opacity * opacity : stroke.opacity * opacity;\n    var strokeFirst = style.strokeFirst;\n\n    if (forceUpdate || strokeWidth !== 1) {\n      updateAttr('stroke-width', strokeWidth);\n    }\n\n    if (forceUpdate || strokeFirst) {\n      updateAttr('paint-order', strokeFirst ? 'stroke' : 'fill');\n    }\n\n    if (forceUpdate || strokeOpacity < 1) {\n      updateAttr('stroke-opacity', strokeOpacity);\n    }\n\n    if (style.lineDash) {\n      var _a = getLineDash(el),\n          lineDash = _a[0],\n          lineDashOffset = _a[1];\n\n      if (lineDash) {\n        lineDashOffset = mathRound(lineDashOffset || 0);\n        updateAttr('stroke-dasharray', lineDash.join(','));\n\n        if (lineDashOffset || forceUpdate) {\n          updateAttr('stroke-dashoffset', lineDashOffset);\n        }\n      }\n    } else if (forceUpdate) {\n      updateAttr('stroke-dasharray', NONE);\n    }\n\n    for (var i = 0; i < strokeProps.length; i++) {\n      var propName = strokeProps[i];\n\n      if (forceUpdate || style[propName] !== DEFAULT_PATH_STYLE[propName]) {\n        var val = style[propName] || DEFAULT_PATH_STYLE[propName];\n        val && updateAttr(svgStrokeProps[i], val);\n      }\n    }\n  } else if (forceUpdate) {\n    updateAttr('stroke', NONE);\n  }\n}","map":null,"metadata":{},"sourceType":"module"}