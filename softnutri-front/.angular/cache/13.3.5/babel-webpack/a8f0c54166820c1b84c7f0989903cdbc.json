{"ast":null,"code":"import { colors } from '../../../../consts';\nimport { customTooltip } from '../../consts';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/card\";\nimport * as i2 from \"@angular/material/select\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@angular/material/core\";\nconst _c0 = [\"chart\"];\nvar matSelectedFields = /*#__PURE__*/(() => {\n  (function (matSelectedFields) {\n    matSelectedFields[\"daily\"] = \"Daily\";\n    matSelectedFields[\"weekly\"] = \"Weekly\";\n    matSelectedFields[\"monthly\"] = \"Monthly\";\n  })(matSelectedFields || (matSelectedFields = {}));\n\n  return matSelectedFields;\n})();\nexport let DailyLineChartComponent = /*#__PURE__*/(() => {\n  class DailyLineChartComponent {\n    constructor() {\n      this.matSelectFields = matSelectedFields;\n      this.selectedMatSelectValue = matSelectedFields.monthly;\n      this.colors = colors;\n    }\n\n    ngOnInit() {\n      this.initChart(this.dailyLineChartData.monthlyData, this.dailyLineChartData.labels);\n    }\n\n    ngAfterViewInit() {\n      this.chartObj = new ApexCharts(this.chart.nativeElement, this.chartOptions);\n      this.chartObj.render();\n    }\n\n    initChart(data, labels) {\n      this.chartOptions = {\n        legend: {\n          show: false\n        },\n        markers: {\n          size: [0, 0, 5]\n        },\n        series: [{\n          name: 'Mobile',\n          type: 'line',\n          data: data.mobile\n        }, {\n          name: 'Desktop',\n          type: 'area',\n          data: data.desktop\n        }, {\n          name: 'Tablet',\n          type: 'line',\n          data: data.tablet\n        }],\n        colors: [colors.BLUE, colors.LIGHT_BLUE, colors.YELLOW],\n        chart: {\n          toolbar: {\n            show: false\n          },\n          height: 350,\n          width: '100%',\n          type: 'line',\n          stacked: true\n        },\n        stroke: {\n          width: [2, 0, 2],\n          curve: ['smooth', 'smooth', 'straight']\n        },\n        plotOptions: {\n          bar: {\n            columnWidth: '50%'\n          }\n        },\n        grid: {\n          yaxis: {\n            lines: {\n              show: false\n            }\n          }\n        },\n        fill: {\n          opacity: 1,\n          gradient: {\n            inverseColors: false,\n            shade: 'light',\n            type: 'vertical',\n            opacityFrom: 0.85,\n            opacityTo: 0.55,\n            stops: [0, 100, 100, 100]\n          }\n        },\n        labels: labels,\n        xaxis: {\n          type: 'datetime',\n          labels: {\n            style: {\n              colors: '#4A4A4A',\n              fontSize: '0.875rem',\n              fontFamily: 'Roboto, Helvetica, Arial, sans-serif',\n              fontWeight: 400\n            }\n          }\n        },\n        yaxis: {\n          show: true,\n          labels: {\n            style: {\n              colors: '#4A4A4A',\n              fontSize: '0.875rem',\n              fontFamily: 'Roboto, Helvetica, Arial, sans-serif',\n              fontWeight: 400\n            }\n          }\n        },\n        tooltip: {\n          custom: ({\n            series,\n            seriesIndex,\n            dataPointIndex,\n            w\n          }) => {\n            return customTooltip;\n          }\n        }\n      };\n    }\n\n    changedMatSelectionValue() {\n      switch (this.selectedMatSelectValue) {\n        case matSelectedFields.daily:\n          this.chartOptions = Object.assign(Object.assign({}, this.chartOptions), {\n            series: [{\n              name: 'Mobile',\n              type: 'line',\n              data: this.dailyLineChartData.dailyData.mobile\n            }, {\n              name: 'Desktop',\n              type: 'area',\n              data: this.dailyLineChartData.dailyData.desktop\n            }, {\n              name: 'Tablet',\n              type: 'line',\n              data: this.dailyLineChartData.dailyData.tablet\n            }]\n          });\n          break;\n\n        case matSelectedFields.weekly:\n          this.chartOptions = Object.assign(Object.assign({}, this.chartOptions), {\n            series: [{\n              name: 'Mobile',\n              type: 'line',\n              data: this.dailyLineChartData.weeklyData.mobile\n            }, {\n              name: 'Desktop',\n              type: 'area',\n              data: this.dailyLineChartData.weeklyData.desktop\n            }, {\n              name: 'Tablet',\n              type: 'line',\n              data: this.dailyLineChartData.weeklyData.tablet\n            }]\n          });\n          break;\n\n        default:\n          this.chartOptions = Object.assign(Object.assign({}, this.chartOptions), {\n            series: [{\n              name: 'Mobile',\n              type: 'line',\n              data: this.dailyLineChartData.monthlyData.mobile\n            }, {\n              name: 'Desktop',\n              type: 'area',\n              data: this.dailyLineChartData.monthlyData.desktop\n            }, {\n              name: 'Tablet',\n              type: 'line',\n              data: this.dailyLineChartData.monthlyData.tablet\n            }]\n          });\n      }\n\n      this.chartObj.updateSeries(this.chartOptions.series);\n    }\n\n  }\n\n  DailyLineChartComponent.ɵfac = function DailyLineChartComponent_Factory(t) {\n    return new (t || DailyLineChartComponent)();\n  };\n\n  DailyLineChartComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: DailyLineChartComponent,\n    selectors: [[\"app-daily-line-chart\"]],\n    viewQuery: function DailyLineChartComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.chart = _t.first);\n      }\n    },\n    inputs: {\n      dailyLineChartData: \"dailyLineChartData\"\n    },\n    decls: 27,\n    vars: 4,\n    consts: [[1, \"chart\"], [1, \"chart__header\"], [1, \"chart__title\"], [1, \"chart-legend\"], [1, \"chart-legend__item\"], [1, \"chart-legend__icon\", \"yellow\"], [1, \"chart-legend__title\"], [1, \"chart-legend__icon\", \"blue\"], [1, \"chart-legend__icon\", \"light-blue\"], [1, \"chart-select\", 3, \"ngModel\", \"ngModelChange\", \"selectionChange\"], [3, \"value\"], [1, \"chart__content\"], [1, \"chart__content-item\"], [\"chart\", \"\"]],\n    template: function DailyLineChartComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-card\", 0)(1, \"mat-card-title\", 1)(2, \"p\", 2);\n        i0.ɵɵtext(3, \"Daily Line Chart\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"div\", 3)(5, \"div\", 4);\n        i0.ɵɵelement(6, \"div\", 5);\n        i0.ɵɵelementStart(7, \"span\", 6);\n        i0.ɵɵtext(8, \"Tablet\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(9, \"div\", 4);\n        i0.ɵɵelement(10, \"div\", 7);\n        i0.ɵɵelementStart(11, \"span\", 6);\n        i0.ɵɵtext(12, \"Mobile\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(13, \"div\", 4);\n        i0.ɵɵelement(14, \"div\", 8);\n        i0.ɵɵelementStart(15, \"span\", 6);\n        i0.ɵɵtext(16, \"Desktop\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(17, \"mat-select\", 9);\n        i0.ɵɵlistener(\"ngModelChange\", function DailyLineChartComponent_Template_mat_select_ngModelChange_17_listener($event) {\n          return ctx.selectedMatSelectValue = $event;\n        })(\"selectionChange\", function DailyLineChartComponent_Template_mat_select_selectionChange_17_listener() {\n          return ctx.changedMatSelectionValue();\n        });\n        i0.ɵɵelementStart(18, \"mat-option\", 10);\n        i0.ɵɵtext(19, \"Daily\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(20, \"mat-option\", 10);\n        i0.ɵɵtext(21, \"Weekly\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(22, \"mat-option\", 10);\n        i0.ɵɵtext(23, \"Monthly\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(24, \"mat-card-content\", 11);\n        i0.ɵɵelement(25, \"div\", 12, 13);\n        i0.ɵɵelementEnd()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(17);\n        i0.ɵɵproperty(\"ngModel\", ctx.selectedMatSelectValue);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"value\", ctx.matSelectFields.daily);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"value\", ctx.matSelectFields.weekly);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"value\", ctx.matSelectFields.monthly);\n      }\n    },\n    directives: [i1.MatCard, i1.MatCardTitle, i2.MatSelect, i3.NgControlStatus, i3.NgModel, i4.MatOption, i1.MatCardContent],\n    styles: [\".chart[_ngcontent-%COMP%]{box-shadow:0 3px 11px #e8eafc,0 3px 3px -2px #b2b2b21a,0 1px 8px #9a9a9a1a;margin:16px 24px}.chart__header[_ngcontent-%COMP%]{display:flex;justify-content:space-between;padding:8px}@media (max-width: 576px){.chart__header[_ngcontent-%COMP%]{flex-wrap:wrap}}.chart__title[_ngcontent-%COMP%]{margin:0;display:flex;align-items:center;color:#6e6e6e;font-weight:500;font-size:18px;text-transform:none;line-height:1.6;letter-spacing:.12px;order:1}.chart__content[_ngcontent-%COMP%]{height:380px;width:100%}@media (max-width: 576px){.chart__content[_ngcontent-%COMP%]{overflow-x:scroll}}@media (max-width: 576px){.chart__content-item[_ngcontent-%COMP%]{width:600px}}.chart-legend[_ngcontent-%COMP%]{display:flex;order:2}.chart-legend__item[_ngcontent-%COMP%]{display:flex;align-items:center;margin-top:2.24px;margin-right:24px}.chart-legend__icon[_ngcontent-%COMP%]{width:5px;height:5px;border-radius:50%}.chart-legend__title[_ngcontent-%COMP%]{text-transform:none;font-weight:500;font-size:18px;color:#6e6e6e;margin-left:8px}@media (max-width: 576px){.chart-legend[_ngcontent-%COMP%]{margin-top:20px;order:3}}.chart-select[_ngcontent-%COMP%]{order:3}@media (max-width: 576px){.chart-select[_ngcontent-%COMP%]{order:2}}.yellow[_ngcontent-%COMP%]{background-color:#ffc260}.blue[_ngcontent-%COMP%]{background-color:#536dfe}.light-blue[_ngcontent-%COMP%]{background-color:#b1bcff}\"]\n  });\n  return DailyLineChartComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}